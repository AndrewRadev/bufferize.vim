*bufferize.txt*	Execute a command and show its output in a buffer

==============================================================================
CONTENTS                                        *bufferize*   *bufferize-contents*

    Installation................................: |bufferize-installation|
    Usage.......................................: |bufferize-usage|
    Settings....................................: |bufferize-settings|
    Internals...................................: |bufferize-internals|
    Issues......................................: |bufferize-issues|


==============================================================================
INSTALLATION                                            *bufferize-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/bufferize.vim.git ~/.vim/bundle/bufferize
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/bufferize.vim.git bundle/bufferize
<

Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, plugin.


==============================================================================
USAGE                                                          *bufferize-usage*
                                                                    *:Bufferize*

The plugin exposes the |:Bufferize| command, which runs the given command and
shows its output in a temporary buffer. For example:
>
    :Bufferize messages
    :Bufferize digraphs
    :Bufferize map
    :Bufferize command
<
All of these are examples of useful commands, whose output you can now freely
explore in a proper Vim buffer.

You can provide any command sequence, with arguments and all. For instance,
if you run the following command in this file:
>
    :Bufferize ilist Bufferize
<
you'll get a buffer with all lines that contain "Bufferize". A lot of other
commands output to the Vim console, and you can just feed them to the
|:Bufferize| command. If you run `:Bufferize command Bufferize`, you'll see that
the command is hooked up to the `bufferize#Run` function. You can then
>
    :Bufferize function bufferize#Run
<
To get a listing of the function in a buffer and explore its source code.


                                                               *:BufferizeTimer*

If you have a recent enough Vim that has |+timers| and |+lambda| (Vim 8 will
do, but you can even use 7.4 with any of the later patches), you can also run
the |:BufferizeTimer| command, which will do the same thing, but will also
auto-update the buffer with the contents in the provided time interval. For
instance:
>
    BufferizeTimer 500 messages
<
This will run the |:messages| command every 500ms and update its output in
the bufferize buffer.


==============================================================================
ISSUES                                                        *bufferize-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/bufferize.vim/issues


vim:tw=78:sw=4:ft=help:norl:
